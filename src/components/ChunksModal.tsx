import React, { useState, useEffect } from 'react'
import { generateTopicTitle } from '../shared/adminApi'

type Chunk = {
  id: number
  page: number | null
  start: number | null
  end: number | null
  preview: string
  topic?: string
}

type ChunksModalProps = {
  isOpen: boolean
  onClose: () => void
  chunks: Chunk[] | null
  documentName: string
  loading: boolean
}

export default function ChunksModal({ isOpen, onClose, chunks, documentName, loading }: ChunksModalProps) {
  const [groupedChunks, setGroupedChunks] = useState<Record<string, Chunk[]>>({})
  const [expandedTopics, setExpandedTopics] = useState<Set<string>>(new Set())
  const [searchTerm, setSearchTerm] = useState('')
  const [generatingTopics, setGeneratingTopics] = useState(false)

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —á–∞–Ω–∫–æ–≤ –ø–æ —Ç–æ–ø–∏–∫–∞–º
  useEffect(() => {
    if (!chunks) {
      setGroupedChunks({})
      return
    }

    const groupChunks = async () => {
      setGeneratingTopics(true)
      const grouped: Record<string, Chunk[]> = {}
      
      // –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–∑–æ–≤—ã–º —Ç–æ–ø–∏–∫–∞–º
      for (const chunk of chunks) {
        const topic = extractTopic(chunk.preview)
        if (!grouped[topic]) {
          grouped[topic] = []
        }
        grouped[topic].push(chunk)
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Å—Ä–∞–∑—É
      setGroupedChunks(grouped)
      setExpandedTopics(new Set())

      // –¢–µ–ø–µ—Ä—å —É–ª—É—á—à–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ò–ò
      const improvedGrouped: Record<string, Chunk[]> = {}
      const topicPromises = Object.entries(grouped).map(async ([topic, topicChunks]) => {
        try {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –≤ —Ç–æ–ø–∏–∫–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          const combinedText = topicChunks.map(c => c.preview).join(' ').substring(0, 1000)
          const aiResponse = await generateTopicTitle(combinedText)
          const improvedTopic = aiResponse.title || topic
          return { topic: improvedTopic, chunks: topicChunks }
        } catch (error) {
          console.warn('Failed to generate AI topic title:', error)
          return { topic, chunks: topicChunks }
        }
      })

      const results = await Promise.all(topicPromises)
      
      results.forEach(({ topic, chunks }) => {
        improvedGrouped[topic] = chunks
      })

      setGroupedChunks(improvedGrouped)
      setGeneratingTopics(false)
    }

    groupChunks()
  }, [chunks])

  const extractTopic = (text: string): string => {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞
    const cleanText = text.trim()
    
    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
    const keywords = [
      '–ø—Ä–∞–≤–∏–ª–∞', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—É—Å–ª–æ–≤–∏—è', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
      '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', '–ø—Ä–∞–≤–∞', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—à—Ç—Ä–∞—Ñ—ã', '—Å–∞–Ω–∫—Ü–∏–∏',
      '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '—Å–æ–≤–µ—Ç', '–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∫–æ–º–∏—Ç–µ—Ç',
      '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '—É—á–∞—Å—Ç–æ–∫',
      '–ø–ª–∞—Ç–µ–∂–∏', '–≤–∑–Ω–æ—Å—ã', '—Å–±–æ—Ä—ã', '–Ω–∞–ª–æ–≥–∏', '—Ä–∞—Å—Ö–æ–¥—ã',
      '—Ä–µ–º–æ–Ω—Ç', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '—É–±–æ—Ä–∫–∞', '–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
      '–ø–∞—Ä–∫–æ–≤–∫–∞', '—Å—Ç–æ—è–Ω–∫–∞', '–≥–∞—Ä–∞–∂', '–º–µ—Å—Ç–æ',
      '–∂–∏–ª—å—Ü—ã', '—Å–æ—Å–µ–¥–∏', '–≥–æ—Å—Ç–∏', '–ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏',
      '—à—É–º', '—Ç–∏—à–∏–Ω–∞', '–ø–æ—Ä—è–¥–æ–∫', '—á–∏—Å—Ç–æ—Ç–∞',
      '–∂–∏–≤–æ—Ç–Ω—ã–µ', '–ø–∏—Ç–æ–º—Ü—ã', '—Å–æ–±–∞–∫–∏', '–∫–æ—à–∫–∏',
      '–∫—É—Ä–µ–Ω–∏–µ', '–∞–ª–∫–æ–≥–æ–ª—å', '–≤–µ—á–µ—Ä–∏–Ω–∫–∏', '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    ]
    
    // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    for (const keyword of keywords) {
      const index = cleanText.toLowerCase().indexOf(keyword.toLowerCase())
      if (index !== -1) {
        // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        const start = Math.max(0, index - 20)
        const end = Math.min(cleanText.length, index + keyword.length + 30)
        let topic = cleanText.substring(start, end).trim()
        
        // –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        topic = topic.replace(/^[^\w\u0400-\u04FF]*/, '') // —É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        topic = topic.replace(/[^\w\u0400-\u04FF\s]*$/, '') // —É–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        
        if (topic.length > 60) {
          topic = topic.substring(0, 60) + '...'
        }
        
        return topic || '–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è'
      }
    }
    
    // –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    const firstSentence = cleanText.split(/[.!?]/)[0].trim()
    if (firstSentence.length > 50) {
      return firstSentence.substring(0, 50) + '...'
    }
    
    return firstSentence || '–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è'
  }

  const toggleTopic = (topic: string) => {
    const newExpanded = new Set(expandedTopics)
    if (newExpanded.has(topic)) {
      newExpanded.delete(topic)
    } else {
      newExpanded.add(topic)
    }
    setExpandedTopics(newExpanded)
  }

  const filteredTopics = Object.entries(groupedChunks).filter(([topic]) =>
    topic.toLowerCase().includes(searchTerm.toLowerCase())
  )

  if (!isOpen) return null

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000,
      padding: '20px'
    }}>
      <div style={{
        background: 'var(--surface)',
        borderRadius: 'var(--radius-lg)',
        width: '100%',
        maxWidth: '900px',
        maxHeight: '80vh',
        display: 'flex',
        flexDirection: 'column',
        boxShadow: 'var(--shadow-lg)'
      }}>
        {/* Header */}
        <div style={{
          padding: '20px',
          borderBottom: '1px solid var(--border)',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div>
            <h2 style={{ margin: 0, fontSize: '20px' }}>–ß–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h2>
            <p style={{ margin: '4px 0 0 0', color: 'var(--text-secondary)', fontSize: '14px' }}>
              {documentName}
            </p>
          </div>
          <button
            onClick={onClose}
            style={{
              background: 'none',
              border: 'none',
              fontSize: '24px',
              cursor: 'pointer',
              color: 'var(--text-muted)',
              padding: '4px'
            }}
          >
            √ó
          </button>
        </div>

        {/* Search */}
        <div style={{ padding: '16px 20px', borderBottom: '1px solid var(--border)' }}>
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–ø–∏–∫–∞–º..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            style={{
              width: '100%',
              padding: '8px 12px',
              border: '1px solid var(--border)',
              borderRadius: 'var(--radius)',
              fontSize: '14px'
            }}
          />
        </div>

        {/* Content */}
        <div style={{
          flex: 1,
          overflow: 'auto',
          padding: '20px'
        }}>
          {loading ? (
            <div style={{ textAlign: 'center', padding: '40px', color: 'var(--text-muted)' }}>
              –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤...
            </div>
          ) : filteredTopics.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '40px', color: 'var(--text-muted)' }}>
              {searchTerm ? '–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ß–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
            </div>
          ) : (
            <>
              {generatingTopics && (
                <div style={{
                  background: 'var(--primary-light)',
                  border: '1px solid var(--primary)',
                  borderRadius: 'var(--radius)',
                  padding: '12px',
                  marginBottom: '16px',
                  textAlign: 'center',
                  color: 'var(--primary)',
                  fontSize: '14px'
                }}>
                  ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–º–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤...
                </div>
              )}
            <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
              {filteredTopics.map(([topic, topicChunks]) => (
                <div key={topic} style={{
                  border: '1px solid var(--border)',
                  borderRadius: 'var(--radius)',
                  overflow: 'hidden'
                }}>
                  {/* Topic Header */}
                  <div
                    onClick={() => toggleTopic(topic)}
                    style={{
                      background: 'var(--surface-hover)',
                      padding: '12px 16px',
                      cursor: 'pointer',
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      borderBottom: expandedTopics.has(topic) ? '1px solid var(--border)' : 'none'
                    }}
                  >
                    <div>
                      <h3 style={{ margin: 0, fontSize: '16px', fontWeight: '600' }}>
                        {topic}
                      </h3>
                      <p style={{ margin: '4px 0 0 0', color: 'var(--text-secondary)', fontSize: '12px' }}>
                        {topicChunks.length} —á–∞–Ω–∫{topicChunks.length === 1 ? '' : topicChunks.length < 5 ? '–∞' : '–æ–≤'}
                      </p>
                    </div>
                    <div style={{
                      fontSize: '18px',
                      color: 'var(--text-muted)',
                      transform: expandedTopics.has(topic) ? 'rotate(90deg)' : 'rotate(0deg)',
                      transition: 'transform 0.2s'
                    }}>
                      ‚ñ∂
                    </div>
                  </div>

                  {/* Topic Chunks */}
                  {expandedTopics.has(topic) && (
                    <div style={{ padding: '16px' }}>
                      <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                        {topicChunks.map((chunk) => (
                          <div key={chunk.id} style={{
                            border: '1px solid var(--border-light)',
                            borderRadius: 'var(--radius)',
                            padding: '12px',
                            background: 'var(--surface)'
                          }}>
                            <div style={{
                              display: 'flex',
                              justifyContent: 'space-between',
                              alignItems: 'center',
                              marginBottom: '8px'
                            }}>
                              <div style={{
                                fontSize: '12px',
                                color: 'var(--text-muted)',
                                fontFamily: 'monospace'
                              }}>
                                #{chunk.id}
                              </div>
                              <div style={{
                                fontSize: '12px',
                                color: 'var(--text-secondary)'
                              }}>
                                {chunk.page ? `—Å—Ç—Ä. ${chunk.page}` : '—Å—Ç—Ä. ‚Äî'} ¬∑ {chunk.start ?? '?'}-{chunk.end ?? '?'}
                              </div>
                            </div>
                            <div style={{
                              whiteSpace: 'pre-wrap',
                              fontSize: '14px',
                              lineHeight: '1.5',
                              color: 'var(--text-primary)'
                            }}>
                              {chunk.preview}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
            </>
          )}
        </div>

        {/* Footer */}
        <div style={{
          padding: '16px 20px',
          borderTop: '1px solid var(--border)',
          background: 'var(--surface-hover)',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <div style={{ fontSize: '12px', color: 'var(--text-muted)' }}>
            –í—Å–µ–≥–æ —Ç–æ–ø–∏–∫–æ–≤: {filteredTopics.length}
          </div>
          <button
            onClick={onClose}
            className="btn-secondary"
            style={{ fontSize: '14px', padding: '8px 16px' }}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  )
}
